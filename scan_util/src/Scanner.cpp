#include "Scanner.h"
#include <fstream>
#include <filesystem>

namespace fs = std::filesystem;

Scanner::Scanner(): detcount_(),
                    finish_(false) {}

void Scanner::check_file() {
    while(!queue_.empty() || !finish_) {

        mtx_.lock();
        std::string path = queue_.front();
        if (path == "\'") {
            mtx_.unlock();
            continue;
        }
        queue_.pop();
        mtx_.unlock();

        std::ifstream file(path);
        if (!file.is_open()) {
            mtx_.lock();
            ++detcount_.err;
            mtx_.unlock();
            continue;
        }

        bool is_js = std::regex_search(path, std::regex("(\\.js)"));

        while (!file.eof()) {
            std::string cur_str;
            getline(file, cur_str);
            if (std::regex_search(cur_str, detcount_.reg_js) && is_js) {
                mtx_.lock();
                ++detcount_.js_det;
                mtx_.unlock();
                file.close();
                continue;
            } else if (std::regex_search(cur_str, detcount_.reg_unix)) {
                mtx_.lock();
                ++detcount_.unix_det;
                mtx_.unlock();
                file.close();
                continue;
            } else if (std::regex_search(cur_str, detcount_.reg_mac)) {
                mtx_.lock();
                ++detcount_.mac_det;
                mtx_.unlock();
                file.close();
                continue;
            }
        }
        file.close();
    }
}

void Scanner::scan_dir(const std::string& dir_path) {
    for (int i = 0; i < THREADS_LIMIT; ++i) {
        threads_.emplace_back([this] {this->check_file();});
    }

    auto time_start = std::chrono::high_resolution_clock::now();

    for (auto &file : fs::directory_iterator(dir_path)) {
        ++detcount_.total_scanned;
        queue_.push((const std::basic_string<char>) file.path());

    }

    finish_ = true;

    while(!queue_.empty());
    auto time_end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<float> time = time_end - time_start;
    detcount_.time = static_cast<unsigned int>(time.count());

    for (auto &th : threads_) {
        th.join();
    }

}

std::string Scanner::print_results()  {
    mtx_.lock();
    std::stringstream ss;
    ss << "====== Scan result ======\n";
    ss << "Processed files: " << detcount_.total_scanned << std::endl;
    ss << "JS detects: " << detcount_.js_det << std::endl;
    ss << "Unix detects: " << detcount_.unix_det << std::endl;
    ss << "macOS detects: " << detcount_.mac_det << std::endl;
    ss << "Errors: " << detcount_.err << std::endl;
    ss << "Exection time: " << std::setfill('0')
              << std::setw(2) << detcount_.time / 3600 << ":"
              << std::setw(2) << (detcount_.time - (detcount_.time/3600)*3600) / 60 << ":"
              << std::setw(2) << (detcount_.time - (detcount_.time/3600)*3600) % 60 << std::endl;
    ss << "=========================\n";
    mtx_.unlock();
    return ss.str();
}

void Scanner::reset() {
    mtx_.lock();
    detcount_.js_det = 0;
    detcount_.unix_det = 0;
    detcount_.mac_det = 0;
    detcount_.total_scanned = 0;
    detcount_.time = 0;
    detcount_.err = 0;

    finish_ = false;

    while (!queue_.empty()) {
        queue_.pop();
    }

    while (!threads_.empty()) {
        threads_.pop_back();
    }

    mtx_.unlock();
}
