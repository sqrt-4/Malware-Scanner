#include <iostream>
#include "Server_un.h"

Server_un::Server_un(const std::string& init_file) : connectfd_(0) {

    sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);
    if ((sockfd_ < 0)) {
        throw "Socket error\n";
    }
    memset(&sa_, 0, sizeof(sa_));
    sa_.sun_family = AF_UNIX;
    strcpy(sa_.sun_path, init_file.data());
    unlink(sa_.sun_path);

    if (bind(sockfd_, (struct sockaddr *) &sa_, sizeof(sa_)) < 0) {
        throw "Bind error\n";
    }

    listen(sockfd_, 10);
}

std::string Server_un::recv() {
    ::recv(connectfd_, buf_, BUFLEN, 0);
    std::string res = buf_;
    return res;
}

void Server_un::send(const std::string &msg) {
    ::send(connectfd_, msg.data(), BUFLEN, 0);
}

void Server_un::accept() {
    connectfd_ = ::accept(sockfd_, nullptr, nullptr);

    if (connectfd_ < 0) {
        throw "Accept error\n";
    }
}

void Server_un::disconnect() {
    shutdown(connectfd_, 2);
    close(connectfd_);
}

Server_un::~Server_un() {
    shutdown(sockfd_, 2);
    close(sockfd_);
}
