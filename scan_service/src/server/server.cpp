#include <sys/socket.h>
#include <sys/un.h>
#include <string>
#include <unistd.h>
#include <filesystem>

#include "Scanner.h"

#define BUFLEN 1024
#define MAX_CLIENTS 5

int main(int argc, char** argv) {

    char buf[BUFLEN];
    int connectfd = 0;
    int sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if ((sockfd < 0)) {
        std::cerr << "Socket error";
        return -1;
    }

    struct sockaddr_un sa;
    memset(&sa, 0, sizeof(sa));
    sa.sun_family = AF_UNIX;
    strcpy(sa.sun_path, "/tmp/a.sock");
    unlink(sa.sun_path);
    if (bind(sockfd, (struct sockaddr *) &sa, sizeof(sa)) < 0) {
        std::cerr << "Bind error\n";
        return -1;
    }

    Scanner scanner;

    listen(sockfd, MAX_CLIENTS);
    std::cout << "== Scan service is started ==\n";
    while(true) {
        connectfd = accept(sockfd, nullptr, nullptr);
        if (connectfd < 0) {
            std::cerr << "Accept error\n";
            return -1;
        }

        recv(connectfd, buf, BUFLEN, 0);
        std::string dir_path = buf;
        if (dir_path == "quit") {
            std::cout << "got: quit\n" << "=========================\n";
            shutdown(sockfd, 2);
            shutdown(connectfd, 2);
            close(connectfd);
            close(sockfd);
            return 0;
        }
        if (!std::filesystem::is_directory(dir_path)) {
            std::cerr << "\"" << dir_path << "\" is not a directory\n";
            continue;
        }

        std::cout << "Scanning: " << dir_path << std::endl;
        scanner.scan_dir(dir_path);
        strcpy(buf, scanner.print_results().data());
        send(connectfd, buf, BUFLEN, 0);
        std::cout << "Results have been sent\n";

        shutdown(connectfd, 2);
        close(connectfd);
        scanner.reset();
    }

}

